-- MySQL Script generated by MySQL Workbench
-- Mon Oct 16 14:39:31 2017
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema sitio_ventas
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema sitio_ventas
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `sitio_ventas`;
CREATE SCHEMA `sitio_ventas` DEFAULT CHARACTER SET utf8 ;
USE `sitio_ventas` ;

-- -----------------------------------------------------
-- Table `sitio_ventas`.`people`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sitio_ventas`.`people` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(35) NOT NULL,
  `email` VARCHAR(35) NOT NULL,
  `phone` VARCHAR(11) NOT NULL,
  `address` VARCHAR(120) NULL,
  UNIQUE INDEX `email_UNIQUE` (`email` ASC),
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sitio_ventas`.`users`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sitio_ventas`.`users` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `person_id` INT NOT NULL,
  `username` VARCHAR(20) NOT NULL,
  `password` VARCHAR(64) NULL,
  PRIMARY KEY (`id`),
  INDEX `person_foreing_key_idx` (`person_id` ASC),
  UNIQUE INDEX `username_UNIQUE` (`username` ASC),
  CONSTRAINT `person_foreing_key`
    FOREIGN KEY (`person_id`)
    REFERENCES `sitio_ventas`.`people` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sitio_ventas`.`sessions`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sitio_ventas`.`sessions` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `user_id` INT NOT NULL,
  `session_id` VARCHAR(36) NOT NULL,
  `expires_at` DATETIME NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `user_foreign_key_idx` (`user_id` ASC),
  UNIQUE INDEX `session_id_UNIQUE` (`session_id` ASC),
  UNIQUE INDEX `user_id_UNIQUE` (`user_id` ASC),
  CONSTRAINT `user_foreign_key`
    FOREIGN KEY (`user_id`)
    REFERENCES `sitio_ventas`.`users` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sitio_ventas`.`products`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sitio_ventas`.`products` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `user_id` INT NOT NULL,
  `name` VARCHAR(40) NOT NULL,
  `price` FLOAT NOT NULL,
  `description` VARCHAR(120) NULL,
  `quantity` INT UNSIGNED NOT NULL DEFAULT 1,
  PRIMARY KEY (`id`),
  INDEX `product_user_foreign_key_idx` (`user_id` ASC),
  CONSTRAINT `product_user_foreign_key`
    FOREIGN KEY (`user_id`)
    REFERENCES `sitio_ventas`.`users` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sitio_ventas`.`messages`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sitio_ventas`.`messages` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `person_id` INT NOT NULL,
  `message` VARCHAR(120) NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `message_person_foreign_key_idx` (`person_id` ASC),
  CONSTRAINT `message_person_foreign_key`
    FOREIGN KEY (`person_id`)
    REFERENCES `sitio_ventas`.`people` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sitio_ventas`.`shopping_carts`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sitio_ventas`.`shopping_carts` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `user_id` INT NOT NULL,
  `finished` TINYINT NOT NULL DEFAULT 0,
  PRIMARY KEY (`id`),
  INDEX `shopping_cart_user_foreign_key_idx` (`user_id` ASC),
  CONSTRAINT `shopping_cart_user_foreign_key`
    FOREIGN KEY (`user_id`)
    REFERENCES `sitio_ventas`.`users` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sitio_ventas`.`items`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sitio_ventas`.`items` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `cart_id` INT NOT NULL,
  `product_id` INT NOT NULL,
  `quantity` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `item_cart_foreign_key_idx` (`cart_id` ASC),
  INDEX `item_product_foreign_key_idx` (`product_id` ASC),
  CONSTRAINT `item_cart_foreign_key`
    FOREIGN KEY (`cart_id`)
    REFERENCES `sitio_ventas`.`shopping_carts` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `item_product_foreign_key`
    FOREIGN KEY (`product_id`)
    REFERENCES `sitio_ventas`.`products` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Views
-- -----------------------------------------------------
CREATE VIEW `active_shopping_carts` AS
    SELECT 
        `shopping_carts`.`id` AS `id`,
        `shopping_carts`.`user_id` AS `user_id`,
        `shopping_carts`.`finished` AS `finished`
    FROM
        `shopping_carts`
    WHERE
        (`shopping_carts`.`finished` = 0);

CREATE VIEW `available_products` AS
    SELECT 
        `products`.`id` AS `id`,
        `products`.`name` AS `name`,
        `products`.`price` AS `price`,
        `products`.`description` AS `description`,
        `products`.`quantity` AS `quantity`
    FROM
        `products`
    WHERE
        (`products`.`quantity` > 0);

 CREATE VIEW `shopping_cart_products` AS
    SELECT 
        `products`.`id` AS `id`,
        `products`.`name` AS `name`,
        `products`.`price` AS `price`,
        `products`.`description` AS `description`,
        `products`.`quantity` AS `in_stock`,
        `items`.`quantity` AS `quantity`,
        `items`.`cart_id` AS `cart_id`
    FROM
        (`products`
        JOIN `items` ON ((`products`.`id` = `items`.`product_id`)))
    ORDER BY `items`.`cart_id`;               

-- -----------------------------------------------------
-- Stored Procedures
-- -----------------------------------------------------


USE `sitio_ventas`;
DROP procedure IF EXISTS `correct_credentials_provided`;
DROP procedure IF EXISTS `register_user`;
DROP procedure IF EXISTS `logout`;
DROP procedure IF EXISTS `is_authenticated`;

DELIMITER $$
USE `sitio_ventas`$$
CREATE PROCEDURE `authenticate_user`(IN username varchar(20), IN psw varchar(15), IN intrval INT)
BEGIN
set @id = null;
SELECT id INTO @id FROM sitio_ventas.users where username = username and password = sha2(psw,0) limit 1;
IF !isnull(@id) then
  set @uuid = MID(UUID(),1,36);
  set @expires_at = date_add(now(), interval intrval second);
  DELETE FROM `sitio_ventas`.`sessions` WHERE user_id = @id AND expires_at < now();
  INSERT INTO `sitio_ventas`.`sessions` ( `user_id`, `session_id`, `expires_at`) VALUES ( @id, @uuid, @expires_at);
  SELECT 1 as authenticated, @uuid as session_id;
ELSE
  SELECT 0 as authenticated, null as session_id;
END IF;
END$$

DELIMITER ;

DELIMITER $$
USE `sitio_ventas`$$
CREATE PROCEDURE `register_user`(IN full_name varchar(35), IN email varchar(35), IN phone varchar(11), IN address varchar(120), IN username varchar(20), IN psw varchar(15))
BEGIN
INSERT INTO `sitio_ventas`.`people` (`name`, `email`, `phone`, `address`) VALUES (full_name, email, phone, address);
INSERT INTO `sitio_ventas`.`users`(`person_id`, `username`,`password`) VALUES ( LAST_INSERT_ID() , username, sha2(psw,0) );
END$$

DELIMITER ;

DELIMITER $$
USE `sitio_ventas`$$
CREATE PROCEDURE `logout`(IN session_id varchar(36))
BEGIN
SELECT `sessions`.`id` INTO @id FROM `sitio_ventas`.`sessions` WHERE session_id = session_id limit 1;
DELETE FROM `sitio_ventas`.`sessions` WHERE id = @id;
END$$

DELIMITER ;

DELIMITER $$
USE `sitio_ventas`$$
CREATE PROCEDURE `is_authenticated`(IN s_id varchar(36))
BEGIN
select count(*) INTO @count from sessions where session_id = s_id and expires_at > now();
IF @count = 1 THEN
 select 1 as authenticated;
ELSE
  call logout(session_id);
  select 0 as authenticated;
END IF;
END$$

DELIMITER ;

DELIMITER $$
USE `sitio_ventas`$$
CREATE PROCEDURE `search_products`(IN query VARCHAR(40))
BEGIN
SELECT * FROM available_products WHERE name LIKE CONCAT(query, '%');
END$$

DELIMITER ;

DELIMITER $$
USE `sitio_ventas`$$
CREATE PROCEDURE `add_product_to_cart`(IN u_id INT, IN pr_id INT)
BEGIN
set @in_stock = 0;
set @cart_id = null;
set @item_id = null;
set @quantity = 0;

SELECT quantity INTO @in_stock FROM products WHERE id =pr_id LIMIT 1;

IF @in_stock > 0 THEN
  SELECT id INTO @cart_id FROM active_shopping_carts WHERE user_id = u_id LIMIT 1;

  IF @cart_id IS NULL THEN
    INSERT INTO shopping_carts (user_id, finished) VALUES (u_id, 0);
    SET @cart_id = LAST_INSERT_ID();
  END IF;
    
  SELECT id, quantity INTO @item_id, @quantity FROM items WHERE product_id = pr_id AND cart_id = @cart_id LIMIT 1;

  IF @item_id IS NULL THEN
    INSERT INTO items (cart_id, product_id, quantity) VALUES (@cart_id, pr_id, 1);
    SELECT 1 as status, 'Producto agregado correctamente' as message;
  ELSEIF @quantity < @in_stock THEN
    SET @quantity = @quantity + 1;
    UPDATE items SET quantity = @quantity WHERE id = @item_id;
    SELECT 1 as status, 'Se ha agregado otra unidad de este producto' as message;
  ELSE
    SELECT 0 as status, CONCAT('No existen mas unidades en existencia, (', @quantity, ') agregadas al carrito, (',@in_stock,') disponibles') as message;  
  END IF;
ELSE
  SELECT 0 as status, 'El producto se encuentra agotado' as message;  
END IF;
END$$

DELIMITER ;

DELIMITER $$
USE `sitio_ventas`$$
CREATE PROCEDURE `delete_cart`(IN crt_id Int)
BEGIN
DELETE FROM items where cart_id = crt_id;
DELETE FROM shopping_carts WHERE id = cart_id;
END$$

DELIMITER ;


DELIMITER $$
USE `sitio_ventas`$$
CREATE PROCEDURE `send_message`(IN user_id int, IN message VARCHAR(120), IN name VARCHAR(35), IN eml VARCHAR(35), IN phone VARCHAR(11))
BEGIN
IF user_id = 0 THEN
  set @person_id = null;
  SELECT id INTO @person_id FROM people WHERE email = eml;
  IF @person_id IS NULL THEN
    INSERT INTO people (name, email, phone) VALUES (name, eml, phone);
        SET @person_id = LAST_INSERT_ID();
    END IF;
ELSE
  SELECT person_id INTO @person_id FROM users where id = user_id limit 1;
END IF;

INSERT INTO messages (person_id, message) VALUES (@person_id, message);
END$$

DELIMITER ;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
